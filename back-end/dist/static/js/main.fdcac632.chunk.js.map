{"version":3,"sources":["connections/axiosClient/index.js","connections/socketIoClient/index.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["axiosCient","Axios","create","baseURL","headers","withCredentials","paramsSerializer","params","queryString","stringify","interceptors","request","use","a","config","response","res","data","err","url","process","URL","socketIoClient","io","on","message","console","log","App","className","src","logo","alt","href","target","rel","onClick","emit","code","post","baseUrl","email","password","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGMA,EAAaC,IAAMC,OAAO,CAC5BC,QAAS,4BACTC,QAAS,CACL,eAAgB,oBAEpBC,iBAAiB,EACjBC,iBAAkB,SAACC,GAAD,OAAYC,IAAYC,UAAUF,MAGxDP,EAAWU,aAAaC,QAAQC,IAAhC,+BAAAC,EAAA,MAAoC,WAAOC,GAAP,SAAAD,EAAA,+EAEzBC,GAFyB,2CAApC,uDAKAd,EAAWU,aAAaK,SAASH,KAC7B,SAACI,GACG,OAAIA,GAAOA,EAAIC,KACJD,EAAIC,KAGRD,KAEX,SAACE,GAEG,MAAMA,KAIClB,Q,QC7BTmB,EAAMC,mIAAYC,KAAO,wBAElBC,EAAiBC,aAAGJ,EAAK,CAAEd,iBAAiB,IAEzDiB,EAAeE,GAAG,8BAA8B,SAACC,GAC7CC,QAAQC,IAAI,eAAgBF,MAGhCH,EAAeE,GAAG,uBAAuB,SAACC,GACtCC,QAAQC,IAAI,eAAgBF,MAGhCH,EAAeE,GAAG,sCAAsC,SAACC,GACrDC,QAAQC,IAAI,eAAgBF,MCfjB,UAA0B,iC,eCqC1BG,MA/Bf,WAaI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACS,8CADT,0BAGA,mBAAGH,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,sBAAvE,yBAGA,wBAAQC,QAdpB,WACId,EAAee,KAAK,qBAAsB,CAAEC,KAAM,aAa1C,qBACA,wBAAQF,QAnBpB,WACIpC,EAAWuC,KAAKzB,EAAO0B,QAAU,kBAAmB,CAAEC,MAAO,kBAAmBC,SAAU,YAkBlF,mBACA,wBAAQN,QAxBpB,WACId,EAAee,KAAK,sBAAuB,kBAuBnC,wBCnBDM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fdcac632.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nimport queryString from \"query-string\";\r\n\r\nconst axiosCient = Axios.create({\r\n    baseURL: \"http://localhost:5000/api\",\r\n    headers: {\r\n        \"content-type\": \"application/json\",\r\n    },\r\n    withCredentials: true,\r\n    paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosCient.interceptors.request.use(async (config) => {\r\n    // Handle token here...\r\n    return config;\r\n});\r\n\r\naxiosCient.interceptors.response.use(\r\n    (res) => {\r\n        if (res && res.data) {\r\n            return res.data;\r\n        }\r\n\r\n        return res;\r\n    },\r\n    (err) => {\r\n        // Handle error\r\n        throw err;\r\n    },\r\n);\r\n\r\nexport default axiosCient;\r\n","import { io } from \"socket.io-client\";\r\n\r\nconst url = process.env.URL || \"http://localhost:5000\";\r\n\r\nexport const socketIoClient = io(url, { withCredentials: true });\r\n\r\nsocketIoClient.on(\"server-send-ack-connection\", (message) => {\r\n    console.log(\"Server says:\", message);\r\n});\r\n\r\nsocketIoClient.on(\"server-send-message\", (message) => {\r\n    console.log(\"Server says:\", message);\r\n});\r\n\r\nsocketIoClient.on(\"server-send-ack-controller-connect\", (message) => {\r\n    console.log(\"Server says:\", message);\r\n});\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import \"./App.css\";\nimport axiosCient from \"./connections/axiosClient\";\nimport { socketIoClient } from \"./connections/socketIoClient\";\nimport logo from \"./logo.svg\";\nimport config from \"./config.json\";\n\nfunction App() {\n    function sendMessage() {\n        socketIoClient.emit(\"client-send-message\", \"Hello Server!\");\n    }\n\n    function login() {\n        axiosCient.post(config.baseUrl + \"/api/user/login\", { email: \"admin@gmail.com\", password: \"123456\" });\n    }\n\n    function controllerConnect() {\n        socketIoClient.emit(\"controller-connect\", { code: \"ESP-12E\" });\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Learn React\n                </a>\n                <button onClick={controllerConnect}>Connect</button>\n                <button onClick={login}>Login</button>\n                <button onClick={sendMessage}>Send</button>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}